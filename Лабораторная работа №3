# Формируется матрица F следующим образом: если в В количество строк, состоящих из одних нулей в четных столбцах в области 2 больше, чем сумма положительных  элементов в четных строках в области 4, то поменять в С симметрично области 1 и 2 местами, иначе С и Е поменять местами несимметрично. При этом матрица А не меняется. После чего вычисляется выражение: ((К*F)*А– (K * AT) . Выводятся по мере формирования А, F и все матричные операции последовательно
def print_m(m, name):
    print(f"\n{name}:")
    for row in m:
        print(' '.join(f'{x:3}' for x in row))


def main():
    K, N = int(input("K = ")), int(input("N = "))

    A = []
    for i in range(N):
        row = []
        for j in range(N):
            row.append(i * N + j - 8)  
        A.append(row)
    print_m(A, "A")

    h = N // 2

    D = [A[i][:h] for i in range(h)]
    E = [A[i][h:] for i in range(h)]
    C = [A[i + h][:h] for i in range(h)]
    B = [A[i + h][h:] for i in range(h)]

    zero_rows = 0
    for i in range(h // 2, h):
        all_zero = True
        for j in range(0, h, 2):
            if B[i][j] != 0:
                all_zero = False
                break
        if all_zero:
            zero_rows += 1

    pos_sum = 0
    for i in range(0, h // 2, 2):
        for j in range(h):
            if E[i][j] > 0:
                pos_sum += E[i][j]

    print(f"Нулевые строки в B: {zero_rows}, Сумма в E: {pos_sum}")

    F = [row[:] for row in A]

    if zero_rows > pos_sum:
        print("Меняем области в C симметрично")

        for i in range(h // 2, h):
            for j in range(h // 2, h):
                F[i + h][j], F[h + h - 1 - i][h - 1 - j] = F[h + h - 1 - i][h - 1 - j], F[i + h][j]
    else:
        print("Меняем C и E несимметрично")
        for i in range(h):
            for j in range(h):
                F[i][j + h], F[i + h][j] = F[i + h][j], F[i][j + h]

    print_m(F, "F")

    KF = [[F[i][j] * K for j in range(N)] for i in range(N)]
    print_m(KF, "K*F")

    KF_A = [[0] * N for _ in range(N)]
    for i in range(N):
        for j in range(N):
            for k in range(N):
                KF_A[i][j] += KF[i][k] * A[k][j]
    print_m(KF_A, "(K*F)*A")

    AT = [[A[j][i] for j in range(N)] for i in range(N)]
    K_AT = [[AT[i][j] * K for j in range(N)] for i in range(N)]
    print_m(K_AT, "K*A^T")

    RES = [[KF_A[i][j] - K_AT[i][j] for j in range(N)] for i in range(N)]
    print_m(RES, "РЕЗУЛЬТАТ")


if __name__ == "__main__":
    main()
